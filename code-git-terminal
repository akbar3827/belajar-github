  git remote add origin https://github.com/username/repo.git
untuk menghubungkan repo lokal di github dengan remote.
  git remote set-url origin https://github.com/username-baru/nama-repo-baru.git

   git add .
untuk menambah perubahan 1 folder saya 
   C:\Users\Bar\Documents\
 │
 ├── belajar-javascript\
 │     ├── index.html
 │     └── script.js
 │
 ├── belajar-python\
 │      ├── main.py
 │
 ├── tugas-sekolah\
       └── laporan.docx
 yang ditambah perubahannya hanya salah satu dari tiga folder tersebut
gid add <name file> ini hanya satu file saja.
  git init
Ini buat menginisialisasi folder kamu jadi repo Git (jadi bisa dipantau perubahan filenya).
  git status
ini untuk mengecek apakah ada file atau folder yang belum ditrack.
  git commit -m "Pesan commit yang jelas dan singkat"
Commit = simpan perubahan ke "riwayat" lokal dengan pesan singkat tentang perubahan itu.
  git push -u origin main ATAU git remote add origin https://github.com/username/repo.git
untuk push perubahan 
origin = nama remote (default biasanya origin)
main = nama branch utama
-u = menghubungkan branch lokal dengan remote, supaya kedepannya cukup pakai git push
  git pull origin main
Ini akan menggabungkan perubahan dari remote ke lokal.
ambil update baru dari remote.
  git remote -v
untuk mengecek nama remote.
  git branch <nama branch baru>
untuk membuat branch baru
  git diff
untuk ingin melihat perubahan yang terjadi 
  git clone <https forknya>
untuk menyimpan repo hasil fork ke file manager
  git clean -f 
untuk membatalkan semuafile yang baru ditambahkan.
  git restore <nama file>
untuk membatalkan perubahan dari file.
  git restore .
untuk membatalkan semua perubahan file yang berada di satu folder yang sama. bisa juga untuk membatalkan penghapusan file.
  git restore --staged <name file>
untuk mengembalikan file yang sudah ke add di stagging kembali ke working directiory.
  git restore --oneline
untuk melihat log yang sebelumnya yang tampilannya lebih simple dan hanhya 7 angka.
  git restore --online --graph
untuk melihat branch atau cabang cabangnya jika kita memiliki branch yang yang komplek, bintang (*) adalah graphnya
  git show <masukkan angka hash nya>
untuk melihat detail dari perubahan saya yang sebelumnya, saya pengen lihat lebih detail apa saja yang sudah saya rubah.
  git difftool <nomor hash> <nomor hash>
untuk membedakan dari kedua commit
  git commit -m "merubah <nama file> menjadi <nama file terbaru>"
gunakan massage ini bila kondisinya ingin merubah nama file saja.
  git reset <mode> <hash>
untuk memindahkan head yang berawal dari hash yang sekarang akan berpindah ke hash yang kita inginkan.
ada dua mode yang digunakan untuk mereset, yaitu soft, mixed, dan hard, sebenernya ada banyak, cuma yang banyak untuk dibahas 
hanya dua ini saja.
--shoft : head akan berpindah, tapi stagging area dan working directory tidak terhapus
--mixed (default) : head akan berpindah, tapi stagging akan terhapus dan working directory tidak akan terhapus, ini defaultnya
--hard : ini paling ekstrimm, head akan berpindah dan juga stagging dan working directiory juga akan terhapus.
  git commit --amend -m ""
untuk menimpa file yang sudah dimodifikasi dan dicommit. tapi code hash nya akan diubah juga karena ada penambahan 
di file tersebut.
  git checkout <hash> --<namafile>
untuk mengambil isi file tersebut <hash> dan meletakkannya ke working directory. hanya mengambil versinya file dari commit itu.
file akan berada di working directory, jika kita ingin menyimpannya menggunakan git add dan git commit.
file lama akan ditimpa (direplace) oleh versi file yang ingin kita lihat, jika kita ingin mengembalikan versi file yang terbaru
versi HEAD nya, kita menggunakan :
  git restore --staged <nama file>
  git restore <nama file>
harus menggunakan 2 syntax tersebut.
  git checkout <hash> 
jika kita ingin melihat commit tertentu.
  git checkout <nama branch>
untuk ingin kembali ke paling awal (now).
  git revert <hash>
untuk benar benar membatalkan commit yang sudah kita lakukan. "lalu apa bedanya dengan git reset? beda yaa, karena jika kita-
membatalkan perubahan dengan menggunakan reset, maka perubahan perubahan setelahnya dari commit tersebut akan hilang juga,-
kita tidak mau hal tersebut terjadi, maka menggunakan revert, jadi akan dibuatkan commit baru dengan isi commit yang ingin-
kita ubah. contohnya dari awalnya file_2.txt menjadi file2.txt (perubahannya akan dibatalkan yang awalnya kita rename menjadi
file_2.txt)
   buatlah file dan diberi .gitignore setelah itu tulis file file yang tidak ingin ikut ditrack dan di commit
untuk mengecualikan file file yang tidak ingin di track dan di commit, contohnya seperti image, dll. 
  git blame <namafile> 
untuk mengetahui apa saja yang menambah perubah, dan untuk mengetahui commitnya itu yang mana?
  git config --global alias.<nama_alias> <perintah_git_aslinya>
untuk mempercepat dan mempermudah anda saat mengetik perintah git diterminal mmisalnya.
contohnya : 
git config --global alias.ko commit
git config --gloabl alias.komit commit (ini juga bisa)
git config --global alias.loglen "log --oneline" kalau perintahnya lebih dari satu menggunakan string
  git add . && git commit -m "pesan"
shortcut untuk add ke stigging area dan commit ke repo.
  git log --oneline --graph
untuk mengecek hasil hash dalam 1 line
  git remote add <namaremote> <link repo nya>
untuk menghubungkan repo lokal ke repo server
  git 


       ALGORITMA GIT DI TERMINAL :
1. cd C:/Users/Bar/Documents/belajar-javascript
   Masuk ke folder project-mu
2. git init
   menginisisalisasi repo git
3. git status
   Kamu akan lihat file berwarna merah = belum ditrack
4. git add .
   Tambahkan semua file ke staging
    Bisa juga git add nama_file kalau mau sebagian aja
5. git commit -m "commit pertama: inisialisasi project"
   Buat commit pertama
6. Buat repo baru di GitHub
    1. Login GitHub
    2. Klik tombol “New repository”
    3. Namai repo kamu misalnya: belajar-javascript
    4. Jangan centang "Initialize with README" (karena lokal kamu udah ada isinya)
    5. Klik Create repository
7. git remote add origin https://github.com/username/belajar-javascript.git
   Hubungkan ke remote GitHub
8. git remote -v
   mengecek nama remote terlebih dahulu.
9. git push -u origin main
  nama remote bermacam macam (origin, main, master, dev, develop, dll.)
10. Selesai! Repo kamu sekarang live di GitHub!

